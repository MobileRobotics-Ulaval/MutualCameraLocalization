// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: img.proto

#ifndef PROTOBUF_img_2eproto__INCLUDED
#define PROTOBUF_img_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dotCapture {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_img_2eproto();
void protobuf_AssignDesc_img_2eproto();
void protobuf_ShutdownFile_img_2eproto();

class Img;

// ===================================================================

class Img : public ::google::protobuf::Message {
 public:
  Img();
  virtual ~Img();

  Img(const Img& from);

  inline Img& operator=(const Img& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Img& default_instance();

  void Swap(Img* other);

  // implements Message ----------------------------------------------

  Img* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Img& from);
  void MergeFrom(const Img& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required bytes image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // required uint32 timestamp_microsec = 3;
  inline bool has_timestamp_microsec() const;
  inline void clear_timestamp_microsec();
  static const int kTimestampMicrosecFieldNumber = 3;
  inline ::google::protobuf::uint32 timestamp_microsec() const;
  inline void set_timestamp_microsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dotCapture.Img)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_timestamp_microsec();
  inline void clear_has_timestamp_microsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 timestamp_;
  ::std::string* image_;
  ::google::protobuf::uint32 timestamp_microsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_img_2eproto();
  friend void protobuf_AssignDesc_img_2eproto();
  friend void protobuf_ShutdownFile_img_2eproto();

  void InitAsDefaultInstance();
  static Img* default_instance_;
};
// ===================================================================


// ===================================================================

// Img

// required int64 timestamp = 1;
inline bool Img::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Img::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Img::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Img::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Img::timestamp() const {
  return timestamp_;
}
inline void Img::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required bytes image = 2;
inline bool Img::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Img::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Img::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Img::clear_image() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& Img::image() const {
  return *image_;
}
inline void Img::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void Img::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void Img::set_image(const void* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Img::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  return image_;
}
inline ::std::string* Img::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Img::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 timestamp_microsec = 3;
inline bool Img::has_timestamp_microsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Img::set_has_timestamp_microsec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Img::clear_has_timestamp_microsec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Img::clear_timestamp_microsec() {
  timestamp_microsec_ = 0u;
  clear_has_timestamp_microsec();
}
inline ::google::protobuf::uint32 Img::timestamp_microsec() const {
  return timestamp_microsec_;
}
inline void Img::set_timestamp_microsec(::google::protobuf::uint32 value) {
  set_has_timestamp_microsec();
  timestamp_microsec_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dotCapture

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_img_2eproto__INCLUDED
